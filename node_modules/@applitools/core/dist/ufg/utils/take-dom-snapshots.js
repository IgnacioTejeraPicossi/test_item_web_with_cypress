"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.takeDomSnapshots = void 0;
const take_dom_snapshot_1 = require("./take-dom-snapshot");
const calculate_regions_1 = require("./calculate-regions");
const wait_for_lazy_load_1 = require("../../automation/utils/wait-for-lazy-load");
const chalk_1 = __importDefault(require("chalk"));
const utils = __importStar(require("@applitools/utils"));
__exportStar(require("./take-dom-snapshot"), exports);
async function takeDomSnapshots({ driver, settings, hooks, provides, logger, }) {
    var _a, _b, _c, _d, _e, _f;
    // calculating cookies here once so that we (a) don't do it for each dom snapshot, and (b) do it before generating safe selectors
    const features = await driver.getFeatures();
    settings.cookies = features.allCookies ? await driver.getCookies().catch(() => []) : [];
    const currentContext = driver.currentContext;
    let calculateRegionsResults = {};
    const waitBeforeCapture = async () => {
        if (utils.types.isFunction(settings.waitBeforeCapture)) {
            await settings.waitBeforeCapture();
        }
        else if (settings.waitBeforeCapture) {
            await utils.general.sleep(settings.waitBeforeCapture);
        }
    };
    if (settings.lazyLoad) {
        await (0, wait_for_lazy_load_1.waitForLazyLoad)({
            context: driver.currentContext,
            settings: settings.lazyLoad !== true ? settings.lazyLoad : {},
            logger,
        });
    }
    if (!settings.layoutBreakpoints) {
        logger.log(`taking single dom snapshot`);
        await ((_a = hooks === null || hooks === void 0 ? void 0 : hooks.beforeEachSnapshot) === null || _a === void 0 ? void 0 : _a.call(hooks));
        await waitBeforeCapture();
        // it's important that we calculate safe selectors as close as possible to taking the dom snapshot
        if (settings.calculateRegionsOptions) {
            calculateRegionsResults = await (0, calculate_regions_1.calculateRegions)({
                ...settings.calculateRegionsOptions,
                driver,
            });
        }
        const snapshot = await (0, take_dom_snapshot_1.takeDomSnapshot)({ context: currentContext, settings, logger });
        await ((_b = calculateRegionsResults === null || calculateRegionsResults === void 0 ? void 0 : calculateRegionsResults.cleanupGeneratedSelectors) === null || _b === void 0 ? void 0 : _b.call(calculateRegionsResults));
        return Array(settings.environments.length).fill({ snapshot, ...calculateRegionsResults });
    }
    const isStrictBreakpoints = utils.types.isArray((_c = settings.layoutBreakpoints) === null || _c === void 0 ? void 0 : _c.breakpoints);
    const requiredWidths = await settings.environments.reduce(async (prev, environment, index) => {
        const { name, width } = (await extractEnvironmentInfo(environment));
        const requiredWidths = await prev;
        const requiredWidth = isStrictBreakpoints
            ? calculateBreakpoint({ breakpoints: settings.layoutBreakpoints.breakpoints, value: width })
            : width;
        let environments = requiredWidths.get(requiredWidth);
        if (!environments)
            requiredWidths.set(requiredWidth, (environments = []));
        environments.push({ name, width, index });
        return requiredWidths;
    }, Promise.resolve(new Map()));
    const smallestBreakpoint = Math.min(...(isStrictBreakpoints ? settings.layoutBreakpoints.breakpoints : []));
    if (isStrictBreakpoints && requiredWidths.has(smallestBreakpoint - 1)) {
        const smallestBrowsers = requiredWidths
            .get(smallestBreakpoint - 1)
            .map(({ name, width }) => `(${name}, ${width})`)
            .join(', ');
        const message = chalk_1.default.yellow(`The following configuration's viewport-widths are smaller than the smallest configured layout breakpoint (${smallestBreakpoint} pixels): [${smallestBrowsers}]. As a fallback, the resources that will be used for these configurations have been captured on a viewport-width of ${smallestBreakpoint} - 1 pixels. If an additional layout breakpoint is needed for you to achieve better results - please add it to your configuration.`);
        logger.console.log(message);
    }
    logger.log(`taking multiple dom snapshots for breakpoints:`, settings.layoutBreakpoints.breakpoints);
    logger.log(`required widths: ${[...requiredWidths.keys()].join(', ')}`);
    const viewportSize = await driver.getViewportSize();
    const snapshotsResults = Array(settings.environments.length);
    if (requiredWidths.has(viewportSize.width)) {
        logger.log(`taking dom snapshot for existing width ${viewportSize.width}`);
        await ((_d = hooks === null || hooks === void 0 ? void 0 : hooks.beforeEachSnapshot) === null || _d === void 0 ? void 0 : _d.call(hooks));
        await waitBeforeCapture();
        // it's important that we calculate safe selectors as close as possible to taking the dom snapshot
        if (settings.calculateRegionsOptions) {
            calculateRegionsResults = await (0, calculate_regions_1.calculateRegions)({
                ...settings.calculateRegionsOptions,
                driver,
            });
        }
        const snapshot = await (0, take_dom_snapshot_1.takeDomSnapshot)({ context: currentContext, settings, logger });
        requiredWidths.get(viewportSize.width).forEach(({ index }) => {
            snapshotsResults[index] = { snapshot, ...calculateRegionsResults };
        });
    }
    for (const [requiredWidth, browsersInfo] of requiredWidths.entries()) {
        logger.log(`taking dom snapshot for width ${requiredWidth}`);
        try {
            await driver.setViewportSize({ width: requiredWidth, height: viewportSize.height });
        }
        catch (err) {
            logger.error(err);
            const actualViewportSize = await driver.getViewportSize();
            if (isStrictBreakpoints) {
                const failedBrowsers = browsersInfo.map(({ name, width }) => `(${name}, ${width})`).join(', ');
                const message = chalk_1.default.yellow(`One of the configured layout breakpoints is ${requiredWidth} pixels, while your local browser has a limit of ${actualViewportSize.width}, so the SDK couldn't resize it to the desired size. As a fallback, the resources that will be used for the following configurations: [${failedBrowsers}] have been captured on the browser's limit (${actualViewportSize.width} pixels). To resolve this, you may use a headless browser as it can be resized to any size.`);
                logger.console.log(message);
                logger.log(message);
            }
            else {
                const failedBrowsers = browsersInfo.map(({ name }) => `(${name})`).join(', ');
                const message = chalk_1.default.yellow(`The following configurations [${failedBrowsers}] have a viewport-width of ${requiredWidth} pixels, while your local browser has a limit of ${actualViewportSize.width} pixels, so the SDK couldn't resize it to the desired size. As a fallback, the resources that will be used for these checkpoints have been captured on the browser's limit (${actualViewportSize.width} pixels). To resolve this, you may use a headless browser as it can be resized to any size.`);
                logger.console.log(message);
                logger.log(message);
            }
        }
        if (settings.layoutBreakpoints.reload) {
            await driver.reloadPage();
        }
        await ((_e = hooks === null || hooks === void 0 ? void 0 : hooks.beforeEachSnapshot) === null || _e === void 0 ? void 0 : _e.call(hooks));
        await waitBeforeCapture();
        if (settings.layoutBreakpoints.reload) {
            // it's important that we calculate safe selectors as close as possible to taking the dom snapshot
            if (settings.calculateRegionsOptions) {
                calculateRegionsResults = await (0, calculate_regions_1.calculateRegions)({
                    ...settings.calculateRegionsOptions,
                    driver,
                });
            }
        }
        const snapshot = await (0, take_dom_snapshot_1.takeDomSnapshot)({ context: currentContext, settings, logger });
        browsersInfo.forEach(({ index }) => {
            snapshotsResults[index] = { snapshot, ...calculateRegionsResults };
        });
    }
    await driver.setViewportSize(viewportSize);
    if (settings.layoutBreakpoints.reload) {
        await driver.reloadPage();
        await waitBeforeCapture();
    }
    else {
        (_f = calculateRegionsResults === null || calculateRegionsResults === void 0 ? void 0 : calculateRegionsResults.cleanupGeneratedSelectors) === null || _f === void 0 ? void 0 : _f.call(calculateRegionsResults);
    }
    return snapshotsResults;
    function calculateBreakpoint({ breakpoints, value }) {
        const nextBreakpointIndex = breakpoints
            .sort((item1, item2) => (item1 > item2 ? 1 : -1))
            .findIndex(breakpoint => breakpoint > value);
        if (nextBreakpointIndex === -1)
            return breakpoints[breakpoints.length - 1];
        else if (nextBreakpointIndex === 0)
            return breakpoints[0] - 1;
        else
            return breakpoints[nextBreakpointIndex - 1];
    }
    async function extractEnvironmentInfo(environment) {
        if (utils.types.has(environment, ['width', 'height'])) {
            const { name, width, height } = environment;
            return { name: name !== null && name !== void 0 ? name : 'default', width, height };
        }
        else if (utils.types.has(environment, 'chromeEmulationInfo')) {
            const devices = await provides.getChromeEmulationDevices();
            const { deviceName, screenOrientation = 'portrait' } = environment.chromeEmulationInfo;
            return { name: deviceName, screenOrientation, ...devices[deviceName][screenOrientation] };
        }
        else if (utils.types.has(environment, 'iosDeviceInfo')) {
            const devices = await provides.getIOSDevices();
            const { deviceName, screenOrientation = 'portrait' } = environment.iosDeviceInfo;
            return { name: deviceName, screenOrientation, ...devices[deviceName][screenOrientation] };
        }
    }
}
exports.takeDomSnapshots = takeDomSnapshots;
